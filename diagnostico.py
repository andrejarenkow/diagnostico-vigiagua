import pandas as pd  # Importa a biblioteca pandas e a renomeia como pd
import streamlit as st # Importa a biblioteca streamlit e a renomeia como st
from streamlit_gsheets import GSheetsConnection

pd.options.display.max_columns=None
st.set_page_config(
    page_title="Form",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state='collapsed')

def reset():
    # Fun√ß√£o para redefinir o estado da sess√£o
    # Coment√°rios abaixo s√£o coment√°rios de c√≥digo, n√£o est√£o habilitados no momento devido ao formato da entrada.
    # conn.update(
    #         worksheet="dados_form",
    #         data=df,
    #     )
    for key in st.session_state.keys():
        # Itera sobre as chaves do estado da sess√£o e redefine seus valores para None
        st.session_state[key] = None
        

try:
    conn = st.experimental_connection("gsheets", type=GSheetsConnection)
    print(conn)
    # L√™ os dados de um arquivo Excel online
    dados = conn.read('P√°gina1')
except Exception as e:
    print(e)

#CODIGO_PLANILHA = '1V6v6pqt21cR3yHkkraQJMYdutJg2PAM1T8nKpRxd-VE'
#gc = gspread.service_account(filename='key.json')
#sh = gc.open_by_key(CODIGO_PLANILHA)
#ws = sh.worksheet('P√°gina1')

col1,colcenter2,col3 = st.columns(3)
# Cria um seletor para escolher a Regional de Sa√∫de
with colcenter2:
    crs = st.selectbox('Selecione a CRS', options=dados['Regional de Sa√∫de'].unique(), index=None, placeholder='Selecione uma CRS', key='crs')
    
    # Cria um seletor para escolher o munic√≠pio com base na Regional de Sa√∫de selecionada
    municipio = st.selectbox('Selecione o munic√≠pio', options=sorted(dados[dados['Regional de Sa√∫de']==crs]['Munic√≠pio'].unique()), index=None, placeholder='Selecione uma munic√≠pio', key='municipio')
    
    # Cria um seletor para escolher o tipo da forma de abastecimento com base no munic√≠pio selecionado
    tipo_forma_abastecimento = st.selectbox('Selecione o tipo da forma de abastecimento', options=sorted(dados[dados['Munic√≠pio']==municipio]['Tipo da Forma de Abastecimento'].unique()), index=None, placeholder='Selecione um tipo de forma de abastecimento', key='forma')

# Filtra os dados para exibir apenas as informa√ß√µes relevantes com base no munic√≠pio e tipo da forma de abastecimento selecionados
dados_municipio = dados[(dados['Munic√≠pio']==municipio)&(dados['Tipo da Forma de Abastecimento']==tipo_forma_abastecimento)][['Nome da Forma de Abastecimento','Sem informa√ß√£o', 'Funcionando', 'Parada/danificada']]
col4,colcenter5,col6 = st.columns([1,2,1])
try:
    # Tenta executar as seguintes instru√ß√µes
    # Coment√°rios abaixo s√£o coment√°rios de c√≥digo, n√£o est√£o habilitados no momento devido ao formato da entrada.
    # st.subheader(f'{tipo_forma_abastecimento} no munic√≠pio de {municipio}')
    with colcenter5:
        st.write('Marque o status de cada uma para informar seu status')  # Exibe uma mensagem para o usu√°rio
        st.data_editor(dados_municipio, use_container_width=True, hide_index=True)  # Exibe os dados do munic√≠pio para edi√ß√£o
    
        # Cria um bot√£o para enviar a atualiza√ß√£o e redefine o estado da sess√£o quando clicado
        submit = st.button('Enviar atualiza√ß√£o!', type='primary', on_click=reset)
    
        # Verifica se o bot√£o de envio foi clicado
        if submit:
            # Exibe uma mensagem de sucesso quando a atualiza√ß√£o √© enviada
            st.success('Atualiza√ß√£o enviada!', icon="‚úÖ")
            st.cache_data.clear()  # Limpa o cache de dados

except:
    # Se ocorrer uma exce√ß√£o, exibe uma mensagem em branco
    st.write('')
